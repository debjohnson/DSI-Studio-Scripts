%%=====================================================================================%%
%%=====================================================================================%%
%%																				      																			 %%
%%										   BATCH TRACKING GUI FOR DSI STUDIO						 								 %%
%%																				      																			 %%
%%=====================================================================================%%
%%=====================================================================================%%

%  
% roi_pairs.m
% 
% This GUI is designed for batch tracking in DSI studio.
% 
%   10/27/11: Wrote It. (D. Johnson)
%   10/27/11: Added text file output. (J. Pyles)
%		10/30/11: Added save/load tracking parameters functions; merged changes from J. Pyles (D. Johnson)
%		Rev. by Deb on 2012-01-12: Improved comments
%

% ===================================================================================== %
% = XXXXXXXXXXXXXXXXXXXXXXXXXXX DO NOT EDIT CODE BELOW XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX = %
% = 						  						 Code generated by GUIDE															  = %

function varargout = roi_pairs(varargin)
	% ROI_PAIRS M-file for roi_pairs.fig
	%      ROI_PAIRS, by itself, creates a new ROI_PAIRS or raises the existing
	%      singleton*.
	%
	%      H = ROI_PAIRS returns the handle to a new ROI_PAIRS or the handle to
	%      the existing singleton*.
	%
	%      ROI_PAIRS('CALLBACK',hObject,eventData,handles,...) calls the local
	%      function named CALLBACK in ROI_PAIRS.M with the given input arguments.
	%
	%      ROI_PAIRS('Property','Value',...) creates a new ROI_PAIRS or raises the
	%      existing singleton*.  Starting from the left, property value pairs are
	%      applied to the GUI before roi_pairs_OpeningFcn gets called.  An
	%      unrecognized property name or invalid value makes property application
	%      stop.  All inputs are passed to roi_pairs_OpeningFcn via varargin.
	%
	%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
	%      instance to run (singleton)".
	%
	% See also: GUIDE, GUIDATA, GUIHANDLES
	
	% Edit the above text to modify the response to help roi_pairs
	
	% Last Modified by GUIDE v2.5 13-Feb-2012 17:41:30
	
	%%%  BEGIN INITIALIZATION CODE: DO NOT EDIT   %%%
	
	gui_Singleton = 1;
	gui_State = struct('gui_Name',       mfilename, ...
	                   'gui_Singleton',  gui_Singleton, ...
	                   'gui_OpeningFcn', @roi_pairs_OpeningFcn, ...
	                   'gui_OutputFcn',  @roi_pairs_OutputFcn, ...
	                   'gui_LayoutFcn',  [] , ...
	                   'gui_Callback',   []);
	if nargin && ischar(varargin{1})
	    gui_State.gui_Callback = str2func(varargin{1});
	end
	
	if nargout
	    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
	else
	    gui_mainfcn(gui_State, varargin{:});
	end
	
	%%%   END INITIALIZATION CODE   %%%
	
% = XXXXXXXXXXXXXXXXXXXXXXXXXXX END DO NOT EDIT SECTION XXXXXXXXXXXXXXXXXXXXXXXXXXXXX = %
% ===================================================================================== %


% ===================================================================================== %
% =																	 OPENING FUNCTION 									  						=	%
% =										Executes just before roi_pairs is made visible.									 =	%
% ===================================================================================== %

function roi_pairs_OpeningFcn(hObject, eventdata, handles, varargin)
	
	% ------------------------------ GENERATED BY GUIDE ------------------------------- %
	% Choose default command line output for roi_pairs
	handles.output = hObject;

	% Update handles structure
	guidata(hObject, handles);
	
	% UIWAIT makes roi_pairs wait for user response (see UIRESUME)
	% uiwait(handles.figure1)
	% --------------------------------------------------------------------------------- %
	
	% Makes it easier to store and retrieve data from GUI throughout script
	setappdata(0, 'hMainGui', gcf);
	
	% Allows storage of variables in GUI for use in other functions
	hMainGui = getappdata(0, 'hMainGui');
	
	% Set up variables that will be used to store information later
	roi_pairs_files = {};
	roi_outputnames = {};
	display_list    = {};
	output_list     = {};
	output_dir      = {};

	% Save variables so they can be accessed from other functions
	setappdata(hMainGui, 'roi_pairs_files', roi_pairs_files);
	setappdata(hMainGui, 'roi_outputnames', roi_outputnames);
	setappdata(hMainGui, 'display_list', display_list);
	setappdata(hMainGui, 'output_list', output_list);	
	setappdata(hMainGui, 'output_dir', output_dir);

%%==========================================================     OUTPUT FUNCTION
% ------ Outputs from this function are returned to the command line. ------ %

function varargout = roi_pairs_OutputFcn(hObject, eventdata, handles) 
	
	% ------------------------------ GENERATED BY GUIDE ------------------------------- %
	% Get default command line output from handles structure
	varargout{1} = handles.output;
	% --------------------------------------------------------------------------------- %

% ===================================================================================== %
% = 		 									 						FILE PATHS																		  =	%
% = 		 								Functions for storing and displaying file paths							  = %
% ===================================================================================== %

%%========================================================================     DSI STUDIO
% ------ Function executes when dsi_studio_button is pressed. ------ %
% ------ Sets path for DSI studio application. ------ %

function dsi_studio_button_Callback(hObject, eventdata, handles)
	
	% Get any information currently stored in the GUI;
	hMainGui = getappdata(0, 'hMainGui');
		% This line of code is at the beginning of almost every function; 
		% It facilitates storing and retrieving variables to and from the GUI, 
		% and makes it so that variables created within the function are accessible from other functions;
	
	% When user clicks button, open file browser window (uigetfile); 
	% Limit selectable files to those that have a .exe extension (*.exe)
	% After user selects DSI Studio, set variables [dsi_studio, dsi_studio_path] to the file name and path
	[dsi_studio, dsi_studio_path] = uigetfile('*.exe','Select DSI Studio');
	
	% Concatenate file name and path into one string that will be sent to DSI Studio later
	dsi_studio_pointer = sprintf('%s%s',dsi_studio_path,dsi_studio);

	% Store the dsi_studio_pointer variable in the GUI.
		% * TIP: Without this line of code, the dsi_studio_pointer variable will not be accessible from other functions
	setappdata(hMainGui, 'dsi_studio_pointer', dsi_studio_pointer);

	% Print the path to the display_dsi_studio box in the GUI
	set(handles.display_dsi_studio, 'string', dsi_studio);

%%===========================================================     SEED FILE
% ------ Function executes when seed_file_button is pressed. ------ %
% ------ Sets path for seed file. ------ %
% ------ See dsi_studio_button_Callback function for comments ------ %

function seed_file_button_Callback(hObject, eventdata, handles)

	hMainGui = getappdata(0, 'hMainGui');

	[seed, seedpath] = uigetfile('*.nii','Select the seed file'); % Path for the seed file
	seedfile = sprintf('%s%s',seedpath,seed);

	setappdata(hMainGui, 'seedfile', seedfile);
	set(handles.display_seed_file, 'string', seed);

%%============================================================     FIB FILE
% ------ Function executes when fib_file_button is pressed. ------ %
% ------ Sets path for fib file. ------ %
% ------ See dsi_studio_button_Callback function for comments ------ %

function fib_file_button_Callback(hObject, eventdata, handles)

	hMainGui = getappdata(0, 'hMainGui');
	
	[fib, fibpath] = uigetfile('*.fib.gz','Select the .fib file'); % Path for .fib file
	fibfile = sprintf('%s%s',fibpath,fib);
	
	setappdata(hMainGui, 'fibfile', fibfile);
	set(handles.display_fib_file, 'string', fib);

% ===================================================================================== %
% = 													    TRACKING PARAMETERS								  								=	%
% = 											Functions related to parameters input boxes					  			= %
% ===================================================================================== %

% -------------------------------- GENERATED BY GUIDE --------------------------------- %
%%===============================================================     SEED COUNT

% --- Executes during object creation, after setting all properties.
function seed_count_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
   	set(hObject,'BackgroundColor','white');
end

%%=============================================================     FA THRESHOLD

% --- Executes during object creation, after setting all properties.
function fa_thresh_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%================================================================     STEP SIZE

% --- Executes during object creation, after setting all properties.
function step_size_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%============================================================     TURNING ANGLE

% --- Executes during object creation, after setting all properties.
function turning_angle_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%================================================================     SMOOTHING

% --- Executes during object creation, after setting all properties.
function smoothing_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%===================================================================     MIN

% --- Executes during object creation, after setting all properties.
function min_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%======================================================================     MAX

% --- Executes during object creation, after setting all properties.
function max_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%%=============================================================     THREAD COUNT

% --- Executes during object creation, after setting all properties.
function thread_count_input_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
% ------------------------------ END GENERATED BY GUIDE ------------------------------- %

%%====================================================     OUTPUT FILE DIRECTORY

% --- Executes on button press in outputdirectory_button.
function outputdirectory_button_Callback(hObject, eventdata, handles)

	hMainGui = getappdata(0, 'hMainGui');
	output_dir = getappdata(hMainGui, 'output_dir');
	
	prompt = {'Output Directory:'};
	directory = uigetdir('*.*','Select location for output file'); % Specifies location for output file
	output_dir = cat(1, output_dir, directory);
	
	setappdata(hMainGui, 'output_dir', output_dir);
	set(handles.display_outputdir, 'string', output_dir);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   SPECIFY ROI FILES/PAIRS   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in add_ROI_button.
function add_ROI_button_Callback(hObject, eventdata, handles)

	hMainGui        = getappdata(0, 'hMainGui');
	roi_pairs_files	= getappdata(hMainGui, 'roi_pairs_files');
	display_list    = getappdata(hMainGui, 'display_list');
	output_dir      = getappdata(hMainGui, 'output_dir');
	
	if isequal(length('output_dir'), 1);
		cd(output_dir); % added JP
	end
	
	[roifile, roipath]   = uigetfile('*.nii','Select first ROI file');
	[roi2file, roi2path] = uigetfile('*.nii','Select second ROI file');
	roi_pairs_files =  cat(1, roi_pairs_files, {roifile, roi2file});
	
	display_name = sprintf('%s ; %s',roifile,roi2file);
	display_list = cat(1, display_list, display_name);
	
	setappdata(hMainGui, 'roi_pairs_files', roi_pairs_files);
	setappdata(hMainGui, 'display_list', display_list);
	setappdata(hMainGui, 'roipath', roipath)
	set(handles.listbox, 'string', display_list);

% --- Executes on selection change in listbox.
function listbox_Callback(hObject, eventdata, handles)

% --- Executes during object creation, after setting all properties.
function listbox_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% ==========================================================     CLEAR ROI FILES

% --- Executes on button press in pushbutton_clear.
function pushbutton_clear_Callback(hObject, eventdata, handles)
	
	hMainGui = getappdata(0, 'hMainGui');
	roi_pairs_files = getappdata(hMainGui, 'roi_pairs_files');
	display_list    = getappdata(hMainGui, 'display_list');
	
	item_selected = get(handles.listbox, 'Value');
	roi_pairs_files(item_selected, :) = [];
	display_list(item_selected) = [];
	
	setappdata(hMainGui, 'roi_pairs_files', roi_pairs_files);
	setappdata(hMainGui, 'display_list', display_list);
	set(handles.listbox, 'string', display_list);

% --- Executes on button press in start_tracking_button.
function start_tracking_button_Callback(hObject, eventdata, handles)

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   GET ALL DATA FROM GUI   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	hMainGui = getappdata(0, 'hMainGui');
	
	dsi_studio_pointer = getappdata(hMainGui, 'dsi_studio_pointer');
	seedfile           = getappdata(hMainGui, 'seedfile');
	fibfile            = getappdata(hMainGui, 'fibfile');
	roi_pairs_files    = getappdata(hMainGui, 'roi_pairs_files');
	output_list        = getappdata(hMainGui, 'output_list');
	output_dir         = getappdata(hMainGui, 'output_dir');
	roipath            = getappdata(hMainGui, 'roipath')
	seed_count         = str2num(strrep(get(handles.seed_count_input, 'string'), ',', ''));
	fa_threshold       = str2num(get(handles.fa_thresh_input, 'string'));
	step_size          = str2num(get(handles.step_size_input, 'string'));
	smoothing          = str2num(get(handles.smoothing_input, 'string'));
	turning_angle      = str2num(get(handles.turning_angle_input, 'string'));
	min_length         = str2num(get(handles.min_input, 'string'));
	max_length         = str2num(get(handles.max_input, 'string'));
	thread_count       = str2num(get(handles.thread_count_input, 'string'));
	
	roi_pairs = {}
  
	for i = 1:size(roi_pairs_files);
		roi  = sprintf('%s%s',roipath,char(roi_pairs_files(i)));
		roi2 = sprintf('%s%s',roipath,char(roi_pairs_files(i, 2)));
		roi_pairs = cat(1, roi_pairs, {roi, roi2});
		[pathstr, roi_outputname, ext]  = fileparts(roi);
		[pathstr, roi2_outputname, ext] = fileparts(roi2);
		roi_outputnames = cat(1, roi_outputnames, {roi_outputname, roi2_outputname});
		output_filename = sprintf('%s_TO_%s%s',roi_outputname,roi2_outputname,output_extension);
		output = sprintf('%s\\%s', output_dir, output_filename);
		output_list = cat(1, output_list, output);
	end

	cd(output_dir);
	
	%% Setup Output txt File %%
	timedate = datestr(now);
	time     = fix(clock);
	hour     = num2str(time(4));
	minute   = num2str(time(5));
	fOut     = strcat('BatchTracking_',date,'-',hour,'-',minute,'_log.txt');
	fid      = fopen(fOut,'a+');
	
	if fid == -1
		fprintf(1, 'File Not Opened Properly\n');
		%sysbeep;
	end;
	
	fprintf(fid, '%s \n', fOut);
	fprintf(fid, '%s\n', datestr(now));
	fprintf(fid, 'Number of Sets of rois to track: %i \n', size(roi_pairs,1));
	fprintf(fid, 'Fib File: %s \n', fibfile);
	fprintf(fid, 'Seed File: %s \n', seedfile);
	fprintf(fid, 'FA Threshold: %4.4f \n', fa_threshold);
	fprintf(fid, 'Step Size: %4.2f mm \n', step_size);
	fprintf(fid, 'Smoothing: %4.2f mm \n', smoothing);
	fprintf(fid, 'Turning Angle: %i \n', turning_angle);
	fprintf(fid, 'Min Length: %i mm \n', min_length);
	fprintf(fid, 'Max Length: %i mm \n', max_length);
	fprintf(fid, 'Thread Count: %i mm \n', thread_count);
	
	fprintf(fid, '------------------------------------------------------------- \n\n');

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   START TRACKING   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	starttime=clock;

	for i = 1:size(roi_pairs, 1)

    	%Record Info
    	disp('*** BATCH FIBER TRACKING ***');
    	fprintf(sprintf('\n\n -- Tracking Set %i of %i -- \n',i,size(roi_pairs,1)));
    	fprintf(fid,'\n\n -- Tracking Set %i of %i -- \n',i,size(roi_pairs,1));
    	fprintf(fid, 'Tracking Pair: %s \n', char(output_list(i)));
    	fprintf(fid, 'Start: %s \n', datestr(now));
    	%fprintf(sprintf('Tracking Pair: %s \n', char(output_list(i))));
    	disp(sprintf('Tracking Pair: %s ', char(output_list(i))))
    	fprintf(sprintf('Start: %s \n', datestr(now)));
    	    
    	% Prepare command to send to DSI Studio
    	strn = sprintf('! %s --action=trk --thread_count=%i --source=%s --method=0 --seed=%s --roi=%s --roi2=%s --seed_count=%i --fa_threshold=%i --turning_angle=%i --step_size=%i --smoothing=%i --min_length=%i --max_length=%i --output=%s', dsi_studio_pointer, thread_count, fibfile, seedfile, char(roi_pairs(i)), char(roi_pairs(i, 2)), seed_count, fa_threshold, turning_angle, step_size, smoothing, min_length, max_length, char(output_list(i)));
    	tic;
			eval(strn) % Send command to DSI Studio
    	tend=toc;
    
    	% Record Info
    	fprintf(fid, 'Command sent to DSI Studio: %s \n', strn);  
    	fprintf(fid, 'End: %s \n', datestr(now));
    	fprintf(fid, 'Track time: %d min and %2.4f secs \n\n',floor(tend/60),rem(tend,60));
    	fprintf(sprintf('Track time: %d min and %2.4f secs \n',floor(tend/60),rem(tend,60)));
    	fprintf(sprintf('\n Tracking Set %i Finished! \n',i));
	end

	endtime = clock;
	totaltime = etime(endtime,starttime);
	
	fprintf(fid, '\n\n ** Completed all at: %s **\n', datestr(now));
	fprintf(fid, '** Total time: %d min and %2.4f secs **\n',floor(totaltime/60),rem(totaltime,60));
	fprintf(sprintf('\n\n ** Completed all at: %s **\n', datestr(now)));
	fprintf(sprintf('** Total time: %d min and %2.4f secs **\n',floor(totaltime/60),rem(totaltime,60)));
	fprintf(sprintf('\n\n ALL FINISHED! \n'));
	fclose(fid);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   SAVE/LOAD TRACKING PARAMETERS   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%==========================================================     SAVE PARAMETERS

% --- Executes on button press in save_params_button.
function save_params_button_Callback(hObject, eventdata, handles)

	state.seed_count    = str2num(get(handles.seed_count_input, 'string'));
	state.fa_threshold  = str2num(get(handles.fa_thresh_input, 'string'));
	state.step_size     = str2num(get(handles.step_size_input, 'string'));
	state.smoothing     = str2num(get(handles.smoothing_input, 'string'));
	state.turning_angle = str2num(get(handles.turning_angle_input, 'string'));
	state.min_length    = str2num(get(handles.min_input, 'string'));
	state.max_length    = str2num(get(handles.max_input, 'string'));
	state.thread_count  = str2num(get(handles.thread_count_input, 'string'));
	
	prompt = {'File name:'};
	dlg_title = 'Enter name for default values set';
	num_lines = 1;
	filename = inputdlg(prompt,dlg_title,num_lines);
	
	defaults_filename = sprintf('%s.mat',char(filename));
	
	save (defaults_filename,'state');

%%==========================================================     LOAD PARAMETERS

% --- Executes on button press in load_params_button.
function load_params_button_Callback(hObject, eventdata, handles)

	[defaults_file, defaults_filepath] = uigetfile('C:\Users\*.mat','Select file to load saved defaults');
	defaults = sprintf('%s%s',defaults_filepath,defaults_file);
	
	load(defaults);
	
	set(handles.seed_count_input, 'string', state.seed_count);
	set(handles.fa_thresh_input, 'string', state.fa_threshold);
	set(handles.step_size_input, 'string', state.step_size);
	set(handles.smoothing_input, 'string', state.smoothing);
	set(handles.turning_angle_input, 'string', state.turning_angle);
	set(handles.min_input, 'string', state.min_length);
	set(handles.max_input, 'string', state.max_length);
	set(handles.thread_count_input, 'string', state.thread_count);
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   CLOSE GUI   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes when user attempts to close figure1.
function figure1_CloseRequestFcn(hObject, eventdata, handles)

	delete(hObject);


% --- Executes on button press in pushbutton12.
function pushbutton12_Callback(hObject, eventdata, handles)

